####Short Answer
1. What is a real-life scenario that uses linear search?
A: Imagine you are looking for a lost child named "Soo" in a park. 
There are about 100 children there, 
and the only way you find Soo is to go to each and every child and ask their name. 

You go to first kid you see and ask his name.
If the name is not Soo, you go to another kid and ask his name.
You repeat this process, or iterate, until you find Soo.

This is a good approach when the search pool is not organized, or sorted. 

2. What is a real-life scenario that uses binary search?
A: Suppose you are looking up a word in a dictionary. Obviously all the inputs are in alphabetical order, or sorted, in dictionaries. 

The word you search is "felicitous".
You open a random page in the dictionary, and your page is in M-section. 
You don't need to look at anything after M, because F is less than M.
Now pick another random page between the beginning and the M and compare it with the search word.

You repeat this process until you find your word. 

3. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using linear search?
A: 7 iterations 

4. Given the alphabetically sorted collection in this checkpoint, how many iterations would it take to find the value G using binary search?
A: 3 iterations

5. Given an unsorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.
A: I'd first sort the collection and then apply the binary search. If sorting is not possible, I can't use binary search, because it only works for sorted collections. 

6. Given a sorted collection of a million items, which algorithm would you choose between linear search and binary search? Explain your reasoning.
A: Binary search, because in the worst case the iterations can go up to a million, whereas it is 19 or 20 times with the binary search (2^19 = 524288, 2^20 = 1048576).

####Programming Assignment:
1. You and a friend have set a wager to see who can find the word "Albatross" in the dictionary the fastest. Write a program to allow you to win the bet.
A: Since the dictionary is a sorted collection, the binary search would be better.


function binaryLookup(dictionary, word){
    let low = 0
    let high = dictionary.length
    while(low < high){
        let mid = Math.floor((low + high) / 2)
        if(dictionary[mid] > word){
          high = mid
        } else if (dictionary[mid] < word){
          low = mid
        } else {
          return mid
        }
    }
  return "not in this dictionary"
}

let dictionary = ["albatross", "butterfly", "canary", "duck", "robin"]
console.log(binaryLookup(dictionary, "albatross"))

2. You work at a pet store, and a child has asked you to net the only white-spotted goldfish from the fish tank. Write a program that will help you net the right fish.
A: Since the tank is not a sorted collection, it should be by the linear search.

function pickRight(tank, fish){
  let value = null
  for(let i=0; i<tank.length; i++){
    value = tank[i]
    if(value === fish){
      return i
    }
  }
  return "not in this tank"
}

let myTank = ["red", "orange", "gold", "white-spotted", "black", "transparent"]
let myFish = "white-spotted"

console.log(pickRight(myTank, myFish))
