Exercise

1. In your own words, explain what clean code is and why it is important.
1A: Clean code allows you to maintain the code and fix bugs easily, and makes it easy to work with other developers as well. 

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
2A: Any code that are used in hospital can be critical to patients' health, even fatal. For example, think about the blood supply system for patients who need a certain type of blood at a specific amount. If the code is not up to standard, the consequences can be disastrous.  

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees Fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to Fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

3A: I think comment is better located before the code starts instead of being on the right. Also you don't need to comment about every single line you write. Only when necessary to help anyone understand what you are trying to achieve. I'd refactor as below:

//Convert degrees F to C 
FUNCTION do(x, y)
  IF y = "F" THEN 
    SET z to (x−32) * (5/9)
    PRINT z

//Convert degrees C to F
  ELSE IF y = "C" THEN
    SET z to x * 1.8000 + 32.00
    PRINT z
  
  END IF
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

4A: I'd rather do the screening first. Also, I would name the arguments "sum" and "total" more specific, in order to give clear ideas what they are. Right now, why the difference between the two is not clear. My refactor would look like: 

function to calculate percent (item, total)
  if total is 0 ? "sorry cannot divide by 0" : item/total * 100

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

  a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
  
  FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

  5aA: I'd separate the total price part from payment type part. It would look something like this: 

//calculate total price
function to create total price (subtotal, discountrate, taxrate)
  variable named total price 
  total price equals (subttoal * (1-discountrate)) * (1-taxrate) 
  return total price 

//another function to adjust total price according to the payment method 
if cash ? (cash formula) : (credit card formula)

  b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

5bA: Since the nesting is too deep, I would make that simple, and adjust the logic as below: 

Function to handle checkout (guest, bookTitle)
  if guest.hasOverdue is true? 
    return "unable to checkout. please resolve fees first"
  else 
    append book to guest.books
    return "bookTitle has been issued"

c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

5cA: Since the BankAccount class has too many responsibilities, and transactions and credit/checking are actually independent activities, I'd put them in different functions: 

function to display balance
  return current balance

function to handle deposit (amount)
  variable new balance equals current balance + deposit 
  Set new balance to currentBalance
  return current balance

function to handle withdraw (amount)
  variable new balance equals current balance - deposit 
  if newBalance is less than 0? 
    return "can't process withdraw"
  else
    Set new balance to current balance
    return current balance
 
function to offer credit card 
  if !hasCreditCard
    return offer credit card 

function to offer checking account 
  if !hasCheckingAccount
    return offer checking account 

Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square 
Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

function to return square root or sum (array)
  variable sum is array.reduce(sum calculate method)
  variable squareRoot is squareRoot of sum 
  isInteger(squareRoot) ? squareRoot : sum 

7. Duplicate 
Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function to find duplicate (array)
   variable results = array.filter(find only distinct)
   array.length == results.length ? false : true 