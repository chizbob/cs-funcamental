Exercise 
1. What is the main difference between a stack and a queue?
The key difference between the two is whether it is FIFO (first in, first out) or LIFO (last in, last out). FIFO is like first come, first served, like you waiting in line in a shop, whereas LIFO is like last come, first served. Stack is LIFO and Queue is FIFO. 

var stack = [];
stack.push(2);       // stack is now [2]
stack.push(5);       // stack is now [2, 5]
var i = stack.pop(); // stack is now [2]
alert(i);            // displays 5

var queue = [];
queue.push(2);         // queue is now [2]
queue.push(5);         // queue is now [2, 5]
var i = queue.shift(); // queue is now [5]
alert(i);   

2. What are the similarities between stacks and queues? 
They both allow for access to any of the elements in them at a certain order. 

3. Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

First of all, what is undo and redo?
Undo: to cancel the latest action taken
Redo: to repeat the latest action taken 

You need to keep the command in a stack for Undo, as well as another empty stack for Redo.  When you pop -because it is the latest action- the undo stack, also you push the same command into the redo stack. So for Undo, it is popped from the stack (last in fist out), and for Redo, the command is pushed to the stack (first in first out). You pop the redo stack and push the popped command back into the undo stack.



Create an object that store some latest actions taken as well as an empty object for Redo. To implement Undo, you pop the latest element from the stack, and, at the same time, push the same command into the Redo stack.  

Programming Questions
1. Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".
Pseudo code)
function to reverse string
  variable originalString for split
  variable newString empty array
  for loop 
    push originalString to empty newString
  Return newString and join 

Actual code)
function reverseString(string){
  let originalString = string.split('')  
  let newString = []
  for(let i = originalString.length ; i >= 0 ; i--){
    newString.push(originalString[i])
  }
  return newString.join('')
}

2. Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
Pseudo code)

Class queue {
 Constructor {}
 Pop method {}
}

Actual code)
class Queue{
  constructor(){
    this.data=[]
  }
  pop(array){
    for(let i = 0 ; i <= array.length-1 ; i++){
      let newArray = array.push(this.data[i])
    }
    return newArray
  }
}


3. Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.
class Queue{
  constructor(){
    this.data=[]
  }
  enqueue(el){
    this.data.push(el) //or .concat(el) if the original array should be kept 
  }
  dequeue(){
    this.data.shift()
  }
}

The end