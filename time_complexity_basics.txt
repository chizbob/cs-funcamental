1. What is time complexity and what is its relation to algorithms? 
A: The time complexity is the formula that describes the amount of time it takes to run an algorithm. It is a way to determine if an algorithm is efficient, meaning requires less time to run. 

2. What is runtime?
A: Runtime refers to the time that takes for an algorithm to be executed, almost interchangeable with the time complexity.

3. How is the runtime of an algorithm calculated?
A: Since the time complexity is affected by operations like function calls and loops, we first add up how many operations/instructions the algorithm will execute, simplify the expression to the largest term, and then drop any constants. 

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
A: 
0(1): constant growth rate 
0(log n): logarithmic growth rate 
0(n): linear growth rate 
0(n log n): log-linear growth rate 
0(n^2): quadratic growth rate 
0(n^3): cubic growth rate
0(2^n): exponential growth rate 

5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A: Binary search tree is an example of logarithmic time. 

6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n), since there's one for loop.

7. Determine the time complexity of the following snippet of code.
FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2), since there is a for loop inside a for loop.

8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.
FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n) 

9. Out of the code snippets you just saw, which is the most time efficient?
A: O(n)
