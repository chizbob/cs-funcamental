1. A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]
A: okay 

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.
A:
function addMary(){
  const withMary = waitingPeople.push("Mary")
  return waitingPeople
}

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).
A: 
function whereIsJosh(){
  return waitingPeople.indexOf("Josh")
}

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

A: 
function isThereEmily(){
  return waitingPeople.includes("Emily")
}

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava? 
A: 
function allowMelissa(){
  const withMelissa = waitingPeople.splice(1, 0, 'Melissa')
  return waitingPeople
}

f) If Patrick wants to leave the line, how would you delete him from the array?
A: 
function removePatrick(){
  const patrickIndex = waitingPeople.indexOf("Patrick")
  const withoutPatrick = waitingPeople.splice(patrickIndex, 1)
  return waitingPeople
}

2. Provide another real-world example that you can model using a data structure.
A: My schedule manager shows which event I am planned to go to for the week. 

a) Currently I am supposed to attend these events: 
A: ["PTA", "Church friends", "Company all-hands", "Weekly team meeting", "Girls night out"]

b) I've been just informed that an ad-hoc standup will take place before "Company all-hands". 
A: 
function addAdhoc(){
  const withAdhoc = upcomingEvents.push("Ad-hoc")
  return upcomingEvents
}

c) Girls night out is canceled. 
A: 
function cancelGirlsNight(){
  const noGirlsNight = upcomingEvents.pop("Girls night out")
  return upcomingEvents
}

d) Since I got sick, I won't be able to make it to first 2 events
A: 
function cancelEvent(){
  return upcomingEvents.slice(2)
}

3. How would your data structure allow developers to access and manipulate the data?
There are built-in methods designed to utilize the data. 

